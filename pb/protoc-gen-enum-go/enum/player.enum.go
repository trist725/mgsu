// Code generated by protoc-gen-enum-go. DO NOT EDIT IT!!!
// source: player.proto

/*
It has these top-level messages:
	Msg
*/

package enum

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [E_Sex] begin

///性别枚举
type E_Sex int32

const (
	E_Sex_ E_Sex = 0
	//男性
	E_Sex_Male E_Sex = 1
	//女性
	E_Sex_Female E_Sex = 2
)

var E_Sex_name = map[int32]string{
	0: "E_Sex_",
	1: "E_Sex_Male",
	2: "E_Sex_Female",
}

var E_Sex_value = map[string]int32{
	"E_Sex_":       0,
	"E_Sex_Male":   1,
	"E_Sex_Female": 2,
}

var E_Sex_Slice = []int32{
	0,
	1,
	2,
}

func (x E_Sex) String() string {
	if name, ok := E_Sex_name[int32(x)]; ok {
		return name
	}
	return ""
}

func E_Sex_Len() int {
	return len(E_Sex_Slice)
}

func Check_E_Sex_I(value int32) bool {
	if _, ok := E_Sex_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_E_Sex(value E_Sex) bool {
	return Check_E_Sex_I(int32(value))
}

func Each_E_Sex(f func(E_Sex) bool) {
	for _, value := range E_Sex_Slice {
		if !f(E_Sex(value)) {
			break
		}
	}
}

func Each_E_Sex_I(f func(int32) bool) {
	for _, value := range E_Sex_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [E_Sex] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [E_Enable0] begin

///测试枚举 @enable_0
type E_Enable0 int32

const (
	E_Enable0_ E_Enable0 = 0

	E_Enable0_1 E_Enable0 = 1
)

var E_Enable0_name = map[int32]string{
	0: "E_Enable0_",
	1: "E_Enable0_1",
}

var E_Enable0_value = map[string]int32{
	"E_Enable0_":  0,
	"E_Enable0_1": 1,
}

var E_Enable0_Slice = []int32{
	0,
	1,
}

func (x E_Enable0) String() string {
	if name, ok := E_Enable0_name[int32(x)]; ok {
		return name
	}
	return ""
}

func E_Enable0_Len() int {
	return len(E_Enable0_Slice)
}

func Check_E_Enable0_I(value int32) bool {
	if _, ok := E_Enable0_name[value]; ok {
		return true
	}
	return false
}

func Check_E_Enable0(value E_Enable0) bool {
	return Check_E_Enable0_I(int32(value))
}

func Each_E_Enable0(f func(E_Enable0) bool) {
	for _, value := range E_Enable0_Slice {
		if !f(E_Enable0(value)) {
			break
		}
	}
}

func Each_E_Enable0_I(f func(int32) bool) {
	for _, value := range E_Enable0_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [E_Enable0] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [Msg_E_Error] begin

//消息中的枚举 测试
type Msg_E_Error int32

const (
	Msg_E_Error_ Msg_E_Error = 0
	//OK test
	Msg_E_Error_OK Msg_E_Error = 1
)

var Msg_E_Error_name = map[int32]string{
	0: "Msg_E_Error_",
	1: "Msg_E_Error_OK",
}

var Msg_E_Error_value = map[string]int32{
	"Msg_E_Error_":   0,
	"Msg_E_Error_OK": 1,
}

var Msg_E_Error_Slice = []int32{
	0,
	1,
}

func (x Msg_E_Error) String() string {
	if name, ok := Msg_E_Error_name[int32(x)]; ok {
		return name
	}
	return ""
}

func Msg_E_Error_Len() int {
	return len(Msg_E_Error_Slice)
}

func Check_Msg_E_Error_I(value int32) bool {
	if _, ok := Msg_E_Error_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_Msg_E_Error(value Msg_E_Error) bool {
	return Check_Msg_E_Error_I(int32(value))
}

func Each_Msg_E_Error(f func(Msg_E_Error) bool) {
	for _, value := range Msg_E_Error_Slice {
		if !f(Msg_E_Error(value)) {
			break
		}
	}
}

func Each_Msg_E_Error_I(f func(int32) bool) {
	for _, value := range Msg_E_Error_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [Msg_E_Error] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [Msg_E_Enable0] begin

//消息中的枚举2 @enable_0
type Msg_E_Enable0 int32

const (
	Msg_E_Enable0_ Msg_E_Enable0 = 0
	//OK
	Msg_E_Enable0_1 Msg_E_Enable0 = 1
)

var Msg_E_Enable0_name = map[int32]string{
	0: "Msg_E_Enable0_",
	1: "Msg_E_Enable0_1",
}

var Msg_E_Enable0_value = map[string]int32{
	"Msg_E_Enable0_":  0,
	"Msg_E_Enable0_1": 1,
}

var Msg_E_Enable0_Slice = []int32{
	0,
	1,
}

func (x Msg_E_Enable0) String() string {
	if name, ok := Msg_E_Enable0_name[int32(x)]; ok {
		return name
	}
	return ""
}

func Msg_E_Enable0_Len() int {
	return len(Msg_E_Enable0_Slice)
}

func Check_Msg_E_Enable0_I(value int32) bool {
	if _, ok := Msg_E_Enable0_name[value]; ok {
		return true
	}
	return false
}

func Check_Msg_E_Enable0(value Msg_E_Enable0) bool {
	return Check_Msg_E_Enable0_I(int32(value))
}

func Each_Msg_E_Enable0(f func(Msg_E_Enable0) bool) {
	for _, value := range Msg_E_Enable0_Slice {
		if !f(Msg_E_Enable0(value)) {
			break
		}
	}
}

func Each_Msg_E_Enable0_I(f func(int32) bool) {
	for _, value := range Msg_E_Enable0_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [Msg_E_Enable0] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
