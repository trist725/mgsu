// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: login.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

/// 错误码
type S2C_Register_E_Error int32

const (
	S2C_Register_Error_ S2C_Register_E_Error = 0
	/// 成功
	S2C_Register_OK S2C_Register_E_Error = 1
	/// 无效帐号名
	S2C_Register_InvalidAccountName S2C_Register_E_Error = 2
	/// 无效密码
	S2C_Register_InvalidPassword S2C_Register_E_Error = 3
	/// 已存在
	S2C_Register_Exist S2C_Register_E_Error = 4
)

var S2C_Register_E_Error_name = map[int32]string{
	0: "Error_",
	1: "OK",
	2: "InvalidAccountName",
	3: "InvalidPassword",
	4: "Exist",
}

var S2C_Register_E_Error_value = map[string]int32{
	"Error_":             0,
	"OK":                 1,
	"InvalidAccountName": 2,
	"InvalidPassword":    3,
	"Exist":              4,
}

func (x S2C_Register_E_Error) String() string {
	return proto.EnumName(S2C_Register_E_Error_name, int32(x))
}

func (S2C_Register_E_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{2, 0}
}

/// 注册返回的帐号状态
type S2C_Register_E_State int32

const (
	S2C_Register_State_ S2C_Register_E_State = 0
	/// 游客
	S2C_Register_Visitor S2C_Register_E_State = 1
	/// 注册
	S2C_Register_Register S2C_Register_E_State = 2
	/// 绑定
	S2C_Register_Bind S2C_Register_E_State = 3
)

var S2C_Register_E_State_name = map[int32]string{
	0: "State_",
	1: "Visitor",
	2: "Register",
	3: "Bind",
}

var S2C_Register_E_State_value = map[string]int32{
	"State_":   0,
	"Visitor":  1,
	"Register": 2,
	"Bind":     3,
}

func (x S2C_Register_E_State) String() string {
	return proto.EnumName(S2C_Register_E_State_name, int32(x))
}

func (S2C_Register_E_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{2, 1}
}

/// 登录错误码枚举
type S2C_Login_E_Error int32

const (
	S2C_Login_Error_ S2C_Login_E_Error = 0
	/// 成功
	S2C_Login_OK S2C_Login_E_Error = 1
	/// 非法帐号
	S2C_Login_InvalidAccount S2C_Login_E_Error = 2
	/// 帐号不存在
	S2C_Login_NotExist S2C_Login_E_Error = 3
	/// 非法密码
	S2C_Login_InvalidPassword S2C_Login_E_Error = 4
	/// 已封号
	S2C_Login_Ban S2C_Login_E_Error = 5
)

var S2C_Login_E_Error_name = map[int32]string{
	0: "Error_",
	1: "OK",
	2: "InvalidAccount",
	3: "NotExist",
	4: "InvalidPassword",
	5: "Ban",
}

var S2C_Login_E_Error_value = map[string]int32{
	"Error_":          0,
	"OK":              1,
	"InvalidAccount":  2,
	"NotExist":        3,
	"InvalidPassword": 4,
	"Ban":             5,
}

func (x S2C_Login_E_Error) String() string {
	return proto.EnumName(S2C_Login_E_Error_name, int32(x))
}

func (S2C_Login_E_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{4, 0}
}

/// 连接关闭
//@msg
type S2C_Close struct {
	/// 关闭代码
	Err int32 `protobuf:"varint,1,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (m *S2C_Close) Reset()         { *m = S2C_Close{} }
func (m *S2C_Close) String() string { return proto.CompactTextString(m) }
func (*S2C_Close) ProtoMessage()    {}
func (*S2C_Close) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{0}
}
func (m *S2C_Close) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Close) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Close.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Close) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Close.Merge(m, src)
}
func (m *S2C_Close) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Close) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Close.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Close proto.InternalMessageInfo

func (m *S2C_Close) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

/// 注册帐号请求
//@msg
type C2S_Register struct {
	/// 帐号名
	AccountName string `protobuf:"bytes,1,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	/// 密码
	Passwrod string `protobuf:"bytes,2,opt,name=Passwrod,proto3" json:"Passwrod,omitempty"`
}

func (m *C2S_Register) Reset()         { *m = C2S_Register{} }
func (m *C2S_Register) String() string { return proto.CompactTextString(m) }
func (*C2S_Register) ProtoMessage()    {}
func (*C2S_Register) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{1}
}
func (m *C2S_Register) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Register) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Register.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Register) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Register.Merge(m, src)
}
func (m *C2S_Register) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Register) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Register.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Register proto.InternalMessageInfo

func (m *C2S_Register) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *C2S_Register) GetPasswrod() string {
	if m != nil {
		return m.Passwrod
	}
	return ""
}

/// 注册帐号结果
//@msg
type S2C_Register struct {
	/// 错误码
	Err S2C_Register_E_Error `protobuf:"varint,1,opt,name=Err,proto3,enum=msg.S2C_Register_E_Error" json:"Err,omitempty"`
	/// 帐号名
	AccountName string `protobuf:"bytes,2,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	/// 密码
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	/// 状态
	State S2C_Register_E_State `protobuf:"varint,4,opt,name=State,proto3,enum=msg.S2C_Register_E_State" json:"State,omitempty"`
}

func (m *S2C_Register) Reset()         { *m = S2C_Register{} }
func (m *S2C_Register) String() string { return proto.CompactTextString(m) }
func (*S2C_Register) ProtoMessage()    {}
func (*S2C_Register) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{2}
}
func (m *S2C_Register) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Register) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Register.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Register) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Register.Merge(m, src)
}
func (m *S2C_Register) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Register) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Register.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Register proto.InternalMessageInfo

func (m *S2C_Register) GetErr() S2C_Register_E_Error {
	if m != nil {
		return m.Err
	}
	return S2C_Register_Error_
}

func (m *S2C_Register) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *S2C_Register) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *S2C_Register) GetState() S2C_Register_E_State {
	if m != nil {
		return m.State
	}
	return S2C_Register_State_
}

/// 登录请求
//@msg
type C2S_Login struct {
	/// 帐号名
	Account string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	/// 密码
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *C2S_Login) Reset()         { *m = C2S_Login{} }
func (m *C2S_Login) String() string { return proto.CompactTextString(m) }
func (*C2S_Login) ProtoMessage()    {}
func (*C2S_Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{3}
}
func (m *C2S_Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Login.Merge(m, src)
}
func (m *C2S_Login) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Login) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Login.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Login proto.InternalMessageInfo

func (m *C2S_Login) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *C2S_Login) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

/// 登录回复
//@msg
type S2C_Login struct {
	/// 错误码
	Err S2C_Login_E_Error `protobuf:"varint,1,opt,name=Err,proto3,enum=msg.S2C_Login_E_Error" json:"Err,omitempty"`
	/// 密钥
	Key string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	/// 服务器列表
	Server []*S2C_Login_ServerInfo `protobuf:"bytes,3,rep,name=Server,proto3" json:"Server,omitempty"`
	/// 上次登录服务器ID
	LastLoginServerID int32 `protobuf:"varint,4,opt,name=LastLoginServerID,proto3" json:"LastLoginServerID,omitempty"`
}

func (m *S2C_Login) Reset()         { *m = S2C_Login{} }
func (m *S2C_Login) String() string { return proto.CompactTextString(m) }
func (*S2C_Login) ProtoMessage()    {}
func (*S2C_Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{4}
}
func (m *S2C_Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Login.Merge(m, src)
}
func (m *S2C_Login) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Login) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Login.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Login proto.InternalMessageInfo

func (m *S2C_Login) GetErr() S2C_Login_E_Error {
	if m != nil {
		return m.Err
	}
	return S2C_Login_Error_
}

func (m *S2C_Login) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *S2C_Login) GetServer() []*S2C_Login_ServerInfo {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *S2C_Login) GetLastLoginServerID() int32 {
	if m != nil {
		return m.LastLoginServerID
	}
	return 0
}

/// 服务器信息
type S2C_Login_ServerInfo struct {
	/// 服务器ID
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	/// 服务器地址 = ip+端口+path, 例如: ws://127.0.0.1:8080/region1
	Addr string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	/// 服务器名
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *S2C_Login_ServerInfo) Reset()         { *m = S2C_Login_ServerInfo{} }
func (m *S2C_Login_ServerInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_Login_ServerInfo) ProtoMessage()    {}
func (*S2C_Login_ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{4, 0}
}
func (m *S2C_Login_ServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Login_ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Login_ServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_Login_ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Login_ServerInfo.Merge(m, src)
}
func (m *S2C_Login_ServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Login_ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Login_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Login_ServerInfo proto.InternalMessageInfo

func (m *S2C_Login_ServerInfo) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *S2C_Login_ServerInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *S2C_Login_ServerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("msg.S2C_Register_E_Error", S2C_Register_E_Error_name, S2C_Register_E_Error_value)
	proto.RegisterEnum("msg.S2C_Register_E_State", S2C_Register_E_State_name, S2C_Register_E_State_value)
	proto.RegisterEnum("msg.S2C_Login_E_Error", S2C_Login_E_Error_name, S2C_Login_E_Error_value)
	proto.RegisterType((*S2C_Close)(nil), "msg.S2C_Close")
	proto.RegisterType((*C2S_Register)(nil), "msg.C2S_Register")
	proto.RegisterType((*S2C_Register)(nil), "msg.S2C_Register")
	proto.RegisterType((*C2S_Login)(nil), "msg.C2S_Login")
	proto.RegisterType((*S2C_Login)(nil), "msg.S2C_Login")
	proto.RegisterType((*S2C_Login_ServerInfo)(nil), "msg.S2C_Login.ServerInfo")
}

func init() { proto.RegisterFile("login.proto", fileDescriptor_67c21677aa7f4e4f) }

var fileDescriptor_67c21677aa7f4e4f = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x14, 0x6c, 0xec, 0xa4, 0x1f, 0xaf, 0x55, 0x31, 0x0f, 0x69, 0x15, 0x56, 0x22, 0xaa, 0x72, 0xaa,
	0x04, 0x2a, 0xa2, 0xdc, 0xb8, 0xf5, 0xeb, 0x50, 0x6d, 0xb5, 0xa0, 0x54, 0x70, 0x43, 0x55, 0xd8,
	0x98, 0x2a, 0x52, 0x1b, 0x23, 0xdb, 0x2c, 0xf0, 0x2f, 0xf8, 0x43, 0xdc, 0xb9, 0x20, 0xed, 0x91,
	0x23, 0x6a, 0xff, 0x08, 0xb2, 0xe3, 0x76, 0x53, 0x60, 0xb9, 0x8d, 0x3d, 0x2f, 0x33, 0x4f, 0x33,
	0x0e, 0xb4, 0x37, 0x62, 0x9d, 0x17, 0x83, 0x0f, 0x52, 0x68, 0x81, 0x74, 0xab, 0xd6, 0xf1, 0x23,
	0x68, 0x2d, 0x87, 0x93, 0xd5, 0x64, 0x23, 0x14, 0x47, 0x06, 0x74, 0x26, 0x65, 0xe8, 0xf5, 0xbc,
	0x7e, 0x90, 0x18, 0x18, 0x2f, 0xa0, 0x33, 0x19, 0x2e, 0x57, 0x09, 0x5f, 0xe7, 0x4a, 0x73, 0x89,
	0x3d, 0x68, 0x8f, 0xae, 0xae, 0xc4, 0xc7, 0x42, 0x5f, 0xa6, 0x5b, 0x6e, 0x27, 0x5b, 0x49, 0xf5,
	0x0a, 0xcf, 0xa1, 0xf9, 0x2a, 0x55, 0xea, 0x93, 0x14, 0x59, 0x48, 0x2c, 0x7d, 0x3c, 0xc7, 0xdf,
	0x08, 0x74, 0x8c, 0xdb, 0x51, 0xee, 0xf1, 0xad, 0x61, 0x77, 0xf8, 0x70, 0xb0, 0x55, 0xeb, 0x41,
	0x95, 0x1f, 0xcc, 0x56, 0x33, 0x29, 0x85, 0xb4, 0xbb, 0xfc, 0xe9, 0x4d, 0xee, 0xf6, 0x16, 0x32,
	0x0b, 0x69, 0xc5, 0x5b, 0xc8, 0x0c, 0x9f, 0x42, 0xb0, 0xd4, 0xa9, 0xe6, 0xa1, 0x7f, 0xb7, 0x99,
	0x1d, 0x48, 0xca, 0xb9, 0xf8, 0x35, 0x34, 0x9c, 0x3d, 0x02, 0xd4, 0x2d, 0x58, 0xb1, 0x1a, 0xd6,
	0x81, 0xbc, 0xbc, 0x60, 0x1e, 0x9e, 0x01, 0xce, 0x8b, 0xeb, 0x74, 0x93, 0x67, 0x95, 0x0d, 0x18,
	0xc1, 0x07, 0x70, 0xcf, 0xdd, 0x1f, 0xac, 0x19, 0xc5, 0x16, 0x04, 0xb3, 0xcf, 0xb9, 0xd2, 0xcc,
	0x8f, 0x5f, 0x18, 0x59, 0xeb, 0x60, 0x64, 0x2d, 0x30, 0xb2, 0x6d, 0x68, 0xbc, 0xc9, 0x55, 0xae,
	0x85, 0x64, 0x1e, 0x76, 0xa0, 0x79, 0xd8, 0x8a, 0x11, 0x6c, 0x82, 0x3f, 0xce, 0x8b, 0x8c, 0xd1,
	0x78, 0x04, 0x2d, 0xd3, 0xc6, 0xc2, 0x94, 0x88, 0x21, 0x34, 0x9c, 0xb3, 0xab, 0xe1, 0x70, 0x3c,
	0x89, 0x81, 0x9c, 0xc6, 0x10, 0xff, 0x20, 0x65, 0xe1, 0xa5, 0x46, 0xbf, 0x9a, 0xff, 0xd9, 0x31,
	0x12, 0x4b, 0x9e, 0x86, 0xcf, 0x80, 0x5e, 0xf0, 0x2f, 0x4e, 0xce, 0x40, 0x7c, 0x06, 0xf5, 0x25,
	0x97, 0xd7, 0x5c, 0x86, 0xb4, 0x47, 0xfb, 0xed, 0x4a, 0xa2, 0xe5, 0xe7, 0x25, 0x39, 0x2f, 0xde,
	0x8b, 0xc4, 0x0d, 0xe2, 0x13, 0xb8, 0xbf, 0x48, 0x95, 0xb6, 0xbc, 0xa3, 0xa7, 0xb6, 0x8f, 0x20,
	0xf9, 0x9b, 0x38, 0x9f, 0x02, 0xdc, 0x6a, 0x60, 0x17, 0xc8, 0x7c, 0xea, 0x9e, 0x26, 0x99, 0x4f,
	0x11, 0xc1, 0x1f, 0x65, 0x99, 0x74, 0x1b, 0x59, 0x6c, 0xee, 0xec, 0xd3, 0x28, 0xbb, 0xb7, 0x38,
	0x7e, 0xfb, 0xff, 0x1a, 0x11, 0xba, 0xa7, 0x35, 0x32, 0x62, 0xe2, 0xbf, 0x14, 0xba, 0x2c, 0x8c,
	0xfe, 0xab, 0x50, 0x1f, 0x1b, 0x40, 0xc7, 0x69, 0xc1, 0x82, 0x71, 0xf8, 0x7d, 0x17, 0x79, 0x37,
	0xbb, 0xc8, 0xfb, 0xb5, 0x8b, 0xbc, 0xaf, 0xfb, 0xa8, 0x76, 0xb3, 0x8f, 0x6a, 0x3f, 0xf7, 0x51,
	0xed, 0x5d, 0xdd, 0xfe, 0x65, 0xcf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x15, 0x18, 0x2c, 0x45,
	0x74, 0x03, 0x00, 0x00,
}

func (m *S2C_Close) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Close) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Err))
	}
	return i, nil
}

func (m *C2S_Register) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Register) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.AccountName)))
		i += copy(dAtA[i:], m.AccountName)
	}
	if len(m.Passwrod) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Passwrod)))
		i += copy(dAtA[i:], m.Passwrod)
	}
	return i, nil
}

func (m *S2C_Register) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Register) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Err))
	}
	if len(m.AccountName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.AccountName)))
		i += copy(dAtA[i:], m.AccountName)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *C2S_Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Login) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *S2C_Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Login) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Err))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Server) > 0 {
		for _, msg := range m.Server {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintLogin(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastLoginServerID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.LastLoginServerID))
	}
	return i, nil
}

func (m *S2C_Login_ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Login_ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.ID))
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeVarintLogin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2C_Close) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLogin(uint64(m.Err))
	}
	return n
}

func (m *C2S_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Passwrod)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *S2C_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLogin(uint64(m.Err))
	}
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovLogin(uint64(m.State))
	}
	return n
}

func (m *C2S_Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *S2C_Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLogin(uint64(m.Err))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if len(m.Server) > 0 {
		for _, e := range m.Server {
			l = e.Size()
			n += 1 + l + sovLogin(uint64(l))
		}
	}
	if m.LastLoginServerID != 0 {
		n += 1 + sovLogin(uint64(m.LastLoginServerID))
	}
	return n
}

func (m *S2C_Login_ServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLogin(uint64(m.ID))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func sovLogin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLogin(x uint64) (n int) {
	return sovLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2C_Close) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Close: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Close: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Register) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Register: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Register: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwrod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwrod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Register) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Register: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Register: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= S2C_Register_E_Error(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= S2C_Register_E_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= S2C_Login_E_Error(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = append(m.Server, &S2C_Login_ServerInfo{})
			if err := m.Server[len(m.Server)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginServerID", wireType)
			}
			m.LastLoginServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLoginServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Login_ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogin
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLogin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLogin
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogin   = fmt.Errorf("proto: integer overflow")
)
