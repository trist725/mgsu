// Code generated by protoc-gen-pbex-go. DO NOT EDIT IT!!!
// source: version.proto

package msg

import (
	json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [VersionInfo] begin
func (m *VersionInfo) ResetEx() {

	m.Content = ""

	m.D = 0.0

	m.F = 0.0

	m.I32 = 0

	m.I64 = 0

	m.Ui32 = 0

	m.Ui64 = 0

	m.B = false

	m.Bytes = nil

}

func (m VersionInfo) Clone() *VersionInfo {
	n, ok := g_VersionInfo_Pool.Get().(*VersionInfo)
	if !ok || n == nil {
		n = &VersionInfo{}
	}

	n.Content = m.Content

	n.D = m.D

	n.F = m.F

	n.I32 = m.I32

	n.I64 = m.I64

	n.Ui32 = m.Ui32

	n.Ui64 = m.Ui64

	n.B = m.B

	if len(m.Bytes) > 0 {
		n.Bytes = make([]byte, len(m.Bytes))
		copy(n.Bytes, m.Bytes)
	} else {
		//n.Bytes = []byte{}
		n.Bytes = nil
	}

	return n
}

func Clone_VersionInfo_Slice(dst []*VersionInfo, src []*VersionInfo) []*VersionInfo {
	for _, i := range dst {
		Put_VersionInfo(i)
	}
	if len(src) > 0 {
		dst = make([]*VersionInfo, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*VersionInfo{}
		dst = nil
	}
	return dst
}

func (m VersionInfo) JsonString() string {
	ba, _ := json.Marshal(m)
	return "VersionInfo:" + string(ba)
}

func New_VersionInfo() *VersionInfo {
	m := &VersionInfo{}
	return m
}

var g_VersionInfo_Pool = sync.Pool{}

func Get_VersionInfo() *VersionInfo {
	m, ok := g_VersionInfo_Pool.Get().(*VersionInfo)
	if !ok {
		m = New_VersionInfo()
	} else {
		if m == nil {
			m = New_VersionInfo()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_VersionInfo(i interface{}) {
	if m, ok := i.(*VersionInfo); ok && m != nil {
		g_VersionInfo_Pool.Put(i)
	}
}

// message [VersionInfo] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
