// Code generated by protoc-gen-pbex2-go. DO NOT EDIT IT!!!
// source: version.proto

/*
It has these top-level messages:
	VersionInfo
*/

package msg

import "sync"
import protocol "github.com/trist725/mgsu/network/protocol/protobuf/v2"

var _ *sync.Pool
var _ = protocol.PH

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [Version] begin

/*
/ 协议版本枚举
*/

var Version_Slice = []int32{
	0,
	1,
}

func Version_Len() int {
	return len(Version_Slice)
}

func Check_Version_I(value int32) bool {
	if _, ok := Version_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_Version(value Version) bool {
	return Check_Version_I(int32(value))
}

func Each_Version(f func(Version) bool) {
	for _, value := range Version_Slice {
		if !f(Version(value)) {
			break
		}
	}
}

func Each_Version_I(f func(int32) bool) {
	for _, value := range Version_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [Version] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [VersionInfo] begin
func (m *VersionInfo) ResetEx() {
	m.Content = ""
	m.D = 0.0
	m.F = 0.0
	m.I32 = 0
	m.I64 = 0
	m.Ui32 = 0
	m.Ui64 = 0
	m.B = false
	m.Bytes = []byte{}

}

func (m VersionInfo) Clone() *VersionInfo {
	n, ok := g_VersionInfo_Pool.Get().(*VersionInfo)
	if !ok || n == nil {
		n = &VersionInfo{}
	}

	n.Content = m.Content
	n.D = m.D
	n.F = m.F
	n.I32 = m.I32
	n.I64 = m.I64
	n.Ui32 = m.Ui32
	n.Ui64 = m.Ui64
	n.B = m.B

	if len(m.Bytes) > 0 {
		n.Bytes = make([]byte, len(m.Bytes))
		copy(n.Bytes, m.Bytes)
	} else {
		n.Bytes = []byte{}
	}

	return n
}

func Clone_VersionInfo_Slice(dst []*VersionInfo, src []*VersionInfo) []*VersionInfo {
	for _, i := range dst {
		Put_VersionInfo(i)
	}
	dst = []*VersionInfo{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_VersionInfo() *VersionInfo {
	m := &VersionInfo{
		Bytes: []byte{},
	}
	return m
}

var g_VersionInfo_Pool = sync.Pool{}

func Get_VersionInfo() *VersionInfo {
	m, ok := g_VersionInfo_Pool.Get().(*VersionInfo)
	if !ok {
		m = New_VersionInfo()
	} else {
		if m == nil {
			m = New_VersionInfo()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_VersionInfo(i interface{}) {
	if m, ok := i.(*VersionInfo); ok && m != nil {
		g_VersionInfo_Pool.Put(i)
	}
}

// message [VersionInfo] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
